#!/usr/local/bin/bash
# Function File for commonly used Functions

2mount() {
   if [[ $1 == "midrangehw" || $1 == "Midrangehw" ]]; then
      osascript <<EOF
mount volume "smb://b14869@bcptcevs10/midrangehw"
EOF
      ln -s /Volumes/midrangehw /Users/b14869/Documents/work
   elif [[ $1 == "home" || $1 == "Home" ]]; then
      osascript <<EOF
mount volume "smb://duce@tateserv1/share"
EOF
   fi
}

brew_upgrade_all() {
   for i in `brew list`; do brew upgrade $i; done
   for i in `brew cask list`; do brew cask upgrade $i; done
}

# Run `dig` and display the most useful info
digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# git config --global alias.magic '!f() { git add -A && git commit -m "$@" && git push; }; f'
gmagic() {
   git add --all
   git commit -m "$*"
   git push
}

gone() {
   quit outlook
   quit skype
   #quit X11
   cd ~
   unlink /Users/b14869/Documents/work
   umount /Volumes/midrangehw
}

goto() {
   tabname $1
   ssh $1
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	else # pipe
		python -mjson.tool | pygmentize -l javascript
	fi
}

list_functions() {
   grep \( ~/.functions | grep \{ | grep -v ^# | grep -v ^" " | awk -F\( '{print $1}'
}

# Get colors in manual pages
man() {
	env \
		LESS_TERMCAP_mb="$(printf '\e[1;31m')" \
		LESS_TERMCAP_md="$(printf '\e[1;31m')" \
		LESS_TERMCAP_me="$(printf '\e[0m')" \
		LESS_TERMCAP_se="$(printf '\e[0m')" \
		LESS_TERMCAP_so="$(printf '\e[1;44;33m')" \
		LESS_TERMCAP_ue="$(printf '\e[0m')" \
		LESS_TERMCAP_us="$(printf '\e[1;32m')" \
		man "$@"
}

propagate() {
   rm -Rf /Users/b14869/projects/midrange/duce/dotfiles/* /Users/b14869/projects/personal/dotfiles/*
   for i in aliases bash_profile bash_prompt exports functions inputrc path tmux.conf vimrc vim
   do
      cp -R ~/.$i /Users/b14869/projects/midrange/duce/dotfiles/$i
      cp -R ~/.$i /Users/b14869/projects/personal/dotfiles/$i
   done
   echo "Remember to git update midrange and personal projects"
}

quit() {
   if [[ $1 == "outlook" || $1 == "Outlook" ]]; then
      osascript -e 'quit app "Microsoft Outlook"'
   elif [[ $1 == "skype" || $1 == "Skype" ]]; then
      osascript -e 'quit app "Skype for Business"'
   else
      osascript -e 'quit app "'$@'"'
   fi
}

# Call from a local repo to open the repository on github/bitbucket in browser
# Modified version of https://github.com/zeke/ghwd
repo() {
	# Figure out github repo base URL
	local base_url
	base_url=$(git config --get remote.origin.url)
	base_url=${base_url%\.git} # remove .git from end of string

	# Fix git@github.com: URLs
	base_url=${base_url//git@github\.com:/https:\/\/github\.com\/}

	# Fix git://github.com URLS
	base_url=${base_url//git:\/\/github\.com/https:\/\/github\.com\/}

	# Fix git@bitbucket.org: URLs
	base_url=${base_url//git@bitbucket.org:/https:\/\/bitbucket\.org\/}

	# Fix git@gitlab.com: URLs
	base_url=${base_url//git@gitlab\.com:/https:\/\/gitlab\.com\/}

	# Validate that this folder is a git folder
	if ! git branch 2>/dev/null 1>&2 ; then
		echo "Not a git repo!"
		exit $?
	fi

	# Find current directory relative to .git parent
	full_path=$(pwd)
	git_base_path=$(cd "./$(git rev-parse --show-cdup)" || exit 1; pwd)
	relative_path=${full_path#$git_base_path} # remove leading git_base_path from working directory

	# If filename argument is present, append it
	if [ "$1" ]; then
		relative_path="$relative_path/$1"
	fi

	# Figure out current git branch
	# git_where=$(command git symbolic-ref -q HEAD || command git name-rev --name-only --no-undefined --always HEAD) 2>/dev/null
	git_where=$(command git name-rev --name-only --no-undefined --always HEAD) 2>/dev/null

	# Remove cruft from branchname
	branch=${git_where#refs\/heads\/}

	[[ $base_url == *bitbucket* ]] && tree="src" || tree="tree"
	url="$base_url/$tree/$branch$relative_path"


	echo "Calling $(type open) for $url"

	open "$url" &> /dev/null || (echo "Using $(type open) to open URL failed." && exit 1);
}

show_hidden() {
   defaults write com.apple.Finder AppleShowAllFiles TRUE
   killall Finder
}

ssh_setup() {
   cat ~/.ssh/id_rsa.pub | ssh $1 'cat - >> ~/.ssh/authorized_keys'
}

tabname() {
   printf "\e]1;$1\a"
}

tre() {
	tree -aC -I '.git' --dirsfirst "$@" | less -FRNX
}

unshow_hidden() {
   defaults write com.apple.Finder AppleShowAllFiles FALSE
   killall Finder
}

use() {
   if [[ $1 == "outlook" || $1 == "Outlook" ]]; then
      osascript -e 'tell app "Microsoft Outlook" to activate'
   elif [[ $1 == "skype" || $1 == "Skype" ]]; then
      osascript -e 'tell app "Skype for Business" to activate'
   else
      osascript -e 'tell app "'$@'" to activate'
   fi
}

work() {
   use outlook
   use skype
   #use X11
   2mount midrangehw
}
