#!env bash
# Function File for commonly used Functions

# OSX specific functions
if [[ `uname` == "Darwin" ]]; then
    2cd() {
      if [[ $# == 0 ]]; then
        builtin cd ~ && ll -tr
      elif [[ $@ == '-' ]]; then
        builtin cd - && ll -tr
      elif [[ -d $@ ]]; then
        builtin cd $@ && ll -tr
      else
        echo $@ directory not found!!!
      fi
    }

    2mount() {
       if [[ $1 == "midrangehw" || $1 == "Midrangehw" ]]; then
          osascript <<EOF
mount volume "smb://b14869@bcptcevs10/midrangehw"
EOF
          ln -s /Volumes/midrangehw /Users/b14869/Documents/work
       elif [[ $1 == "home" || $1 == "Home" ]]; then
          osascript <<EOF
mount volume "smb://duce@tateserv1/share"
EOF
       fi
    }

    2umount() {
       if [[ $1 == "midrangehw" || $1 == "Midrangehw" ]]; then
          umount /Volumes/midrangehw
          unlink /Users/b14869/Documents/work
       elif [[ $1 == "home" || $1 == "Home" ]]; then
          umount /Volumes/share
       fi
    }

    brew_upgrade_all() {
       for i in `brew list`; do brew upgrade $i; done
       for i in `brew cask list`; do brew cask upgrade $i; done
       cowsay Brew Upgrades are Complete
    }

    gone() {
       for i in teams onenote outlook; do
          quit $i
       done
       kill -9 `ps -ef | grep -i Spark | grep -v grep | grep -v Helper | awk '{print $2}'`
       #quit X11
       cd ~
       unlink /Users/b14869/Documents/work
       umount /Volumes/midrangehw
       if [ -f /Users/b14869/Desktop/password ]; then
          rm /Users/b14869/Desktop/password
       fi
       cowsay Have a Great Evening!
    }

    list_running_apps() {
       osascript <<EOF
tell application "Finder"
get the name of every process whose visible is true
end tell
EOF
    }

    mkprj() {
       mkdir /Users/b14869/projects/$1
       cp /Users/b14869/projects/gitignore /Users/b14869/projects/$1/.gitignore
    }

    quit() {
       if [[ $1 == "outlook" || $1 == "Outlook" ]]; then
          osascript -e 'quit app "Microsoft Outlook"'
       elif [[ $1 == "onenote" || $1 == "OneNote" || $1 == "Onenote" ]]; then
          osascript -e 'quit app "Microsoft OneNote"'
       elif [[ $1 == "teams" || $1 == "Teams" ]]; then
          osascript -e 'quit app "Webex Teams"'
       elif [[ $1 == "skype" || $1 == "Skype" ]]; then
          osascript -e 'quit app "Skype for Business"'
       else
          osascript -e 'quit app "'$@'"'
       fi
    }

    show_hidden() {
       defaults write com.apple.Finder AppleShowAllFiles TRUE
       killall Finder
    }

    unshow_hidden() {
       defaults write com.apple.Finder AppleShowAllFiles FALSE
       killall Finder
    }

    use() {
       if [[ $1 == "outlook" || $1 == "Outlook" ]]; then
          osascript -e 'tell app "Microsoft Outlook" to activate'
       elif [[ $1 == "onenote" || $1 == "OneNote" || $1 == "Onenote" ]]; then
          osascript -e 'tell app "Microsoft OneNote" to activate'
       elif [[ $1 == "teams" || $1 == "Teams" ]]; then
          osascript -e 'tell app "Webex Teams" to activate'
       elif [[ $1 == "skype" || $1 == "Skype" ]]; then
          osascript -e 'tell app "Skype for Business" to activate'
       else
          osascript -e 'tell app "'$@'" to activate'
       fi
    }

    work() {
       for i in teams onenote outlook; do
          use $i
       done
       #use X11
       2mount midrangehw
       cowsay GET TO IT!
    }

fi

# Non OS specific functions
# Run `dig` and display the most useful info
digga() {
  dig +nocmd "$1" any +multiline +noall +answer
}

docker_destroy() {
  container=`docker ps | grep $1 | awk '{print $1}'`
  docker stop $container
  docker rm $container
  cowsay $container is stopped and removed
}

docker_standup() {
  docker build --tag $1 . && docker run -d --name $1 -p $2:$2 $1
  cowsay $1 is built and exposed on $2
}

# git config --global alias.magic '!f() { git add -A && git commit -m "$@" && git push; }; f'
gmagic() {
   git add --all
   git commit -am "$*"
   git push
}

goto() {
   tabname $1
   ssh $1
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	else # pipe
		python -mjson.tool | pygmentize -l javascript
	fi
}

list_functions() {
   grep \( ~/.functions | grep \{ | grep -v ^# | grep -v ^" " | awk -F\( '{print $1}'
}

# Get colors in manual pages
man() {
	env \
		LESS_TERMCAP_mb="$(printf '\e[1;31m')" \
		LESS_TERMCAP_md="$(printf '\e[1;31m')" \
		LESS_TERMCAP_me="$(printf '\e[0m')" \
		LESS_TERMCAP_se="$(printf '\e[0m')" \
		LESS_TERMCAP_so="$(printf '\e[1;44;33m')" \
		LESS_TERMCAP_ue="$(printf '\e[0m')" \
		LESS_TERMCAP_us="$(printf '\e[1;32m')" \
		man "$@"
}

pawk() {
    while getopts ":hdvi" option; do
        case $option in
            h)
               echo "usage: pawk [-hvi] [pattern] [file]"
               echo
               echo "options:"
               echo "h     Print this Help"
               echo "d     Debug - print the command"
               echo "v     Exclude pattern"
               echo "i     Case insensitive"
               exit;;
            d)
               debug=1;;
            v)
               exclude=1;;
            i)
               case_insensitive=1;;
            \?) # Invalid option
               echo "Error: Invalid option"
               exit;;
         esac
      done

      shift $((OPTIND-1))
      pattern=$1
      file=$2

      section="'"
      if [[ -n $case_insensitive ]]; then
          pattern=$(echo $pattern | awk '{print tolower($0)}')
          section+='tolower($0)'
          if [[ -n $exclude ]]; then
              section+='!~'
          else
              section+='~'
          fi
      elif [[ -n $exclude ]]; then
          section+='!'
      fi
      section+="/$pattern/'"

      cmd="awk ${section} RS='\\n\\n' ORS='\\n\\n' $file"
      if [[ -n $debug ]]; then
          echo "Running: $cmd"
      fi
      eval $cmd
}

# Call from a local repo to open the repository on github/bitbucket in browser
# Modified version of https://github.com/zeke/ghwd
repo() {
	# Figure out github repo base URL
	local base_url
	base_url=$(git config --get remote.origin.url)
	base_url=${base_url%\.git} # remove .git from end of string

	# Fix git@github.com: URLs
	base_url=${base_url//git@github\.com:/https:\/\/github\.com\/}

	# Fix git://github.com URLS
	base_url=${base_url//git:\/\/github\.com/https:\/\/github\.com\/}

	# Fix git@bitbucket.org: URLs
	base_url=${base_url//git@bitbucket.org:/https:\/\/bitbucket\.org\/}

	# Fix git@gitlab.com: URLs
	base_url=${base_url//git@gitlab\.com:/https:\/\/gitlab\.com\/}

	# Validate that this folder is a git folder
	if ! git branch 2>/dev/null 1>&2 ; then
		echo "Not a git repo!"
		exit $?
	fi

	# Find current directory relative to .git parent
	full_path=$(pwd)
	git_base_path=$(cd "./$(git rev-parse --show-cdup)" || exit 1; pwd)
	relative_path=${full_path#$git_base_path} # remove leading git_base_path from working directory

	# If filename argument is present, append it
	if [ "$1" ]; then
		relative_path="$relative_path/$1"
	fi

	# Figure out current git branch
	# git_where=$(command git symbolic-ref -q HEAD || command git name-rev --name-only --no-undefined --always HEAD) 2>/dev/null
	git_where=$(command git name-rev --name-only --no-undefined --always HEAD) 2>/dev/null

	# Remove cruft from branchname
	branch=${git_where#refs\/heads\/}

	[[ $base_url == *bitbucket* ]] && tree="src" || tree="tree"
	url="$base_url/$tree/$branch$relative_path"


	echo "Calling $(type open) for $url"

	open "$url" &> /dev/null || (echo "Using $(type open) to open URL failed." && exit 1);
}

ssh_setup() {
   cat ~/.ssh/id_rsa.pub | ssh $1 'cat - >> ~/.ssh/authorized_keys'
}

tabname() {
   printf "\e]1;$1\a"
}

tre() {
	tree -aC -I '.git' --dirsfirst "$@" | less -FRNX
}

weather() {
    curl "wttr.in/${1: -35209}\?F"
}
