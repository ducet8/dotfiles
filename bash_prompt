#!/usr/bin/env bash
# 2022.08.04 - ducet8@outlook.com

# go get -u github.com/justjanne/powerline-GOPATH

function _prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ "$(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}")" == '0' ]; then
		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then
			if [[ -O "$(git rev-parse --show-toplevel)/.git/index" ]]; then
				git update-index --really-refresh -q &> /dev/null;
			fi;

			# Check for uncommitted changes in the index.
			if ! git diff --quiet --ignore-submodules --cached; then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! git diff-files --quiet --ignore-submodules --; then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if git rev-parse --verify refs/stash &>/dev/null; then
				s+='$';
			fi;
		fi;
		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "${1}${branchName}${BLUE}${s}";
	else
		return;
	fi;
}

function _update_ps1() {
    PS1="\[\\033]0;\\u@\\h\\007\]";
    PS1+="$($GOPATH/bin/powerline-go -error $? -colorize-hostname)"
}

function fallback_ps1() {
    # Shell prompt based on the Solarized Dark theme.
    # iTerm → Profiles → Text → use 13pt Monaco with 1.1 vertical spacing.
    # vim: set filetype=sh :
    if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
        export TERM='gnome-256color';
    elif infocmp xterm-256color >/dev/null 2>&1; then
        export TERM='xterm-256color';
    fi;

    cloud=""
    if [[ -f /proc/cpuinfo ]]; then
        if grep -q "^flags.* hypervisor" /proc/cpuinfo && [[ ! -d "/mnt/c/Windows/" ]]; then
            cloud="☁️ "
        fi
    fi

    # Highlight the user name when logged in as root.
    if [[ "${USER}" == "root" ]]; then
        userStyle="${RED}";
    else
        userStyle="${BLUE}";
    fi;

    # Highlight the hostname when connected via SSH.
    if [[ "${SSH_TTY}" ]]; then
        hostStyle="${BOLD}${CYAN}";
    else
        hostStyle="${CYAN}";
    fi;

    # Set the terminal title to the current working directory.
    PS1="\[\033]0;\]\u@\h\[\007\]";
    PS1+="\[${userStyle}\]\u"; # username
    PS1+="\[${WHITE}\]@";
    PS1+="\[${hostStyle}${cloud}\]\h"; # host
    PS1+="\[${WHITE}\]:";
    PS1+="\[${GREEN}\]\w"; # working directory
    PS1+="\$(_prompt_git \"\[${WHITE}\] on \[${VIOLET}\]\")"; # Git repository details
    PS1+="\[${WHITE}\]\$ \[${RESET}\]"; # `$` (and reset color)
    PS1+="\n\[${BOLD}${GREEN}\]";
    export PS1;

    PS2="\[${YELLOW}\]→ \[${RESET}\]";
    PS2+="\n\[${BOLD}${GREEN}\]";
    export PS2;
    trap '[[ -t 1 ]] && tput sgr0' DEBUG
}

if [ "$TERM" != "linux" ] && [ -f "$GOPATH/bin/powerline-go" ]; then
    PROMPT_COMMAND="_update_ps1; $PROMPT_COMMAND"
else
    fallback_ps1
fi